name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Verify formatting
        run: |
          if ! dart format --output=none --set-exit-if-changed .; then
            echo "‚ùå Code formatting check failed!"
            echo "Please run 'dart format .' to fix formatting issues."
            exit 1
          fi

      - name: Analyze project source
        run: flutter analyze

      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Run unit tests
        run: flutter test test/unit/ --coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          name: codecov-umbrella
          fail_ci_if_error: false

  build-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libblkid-dev liblzma-dev

      - name: Enable platform (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: flutter config --enable-linux-desktop

      - name: Enable platform (macOS)
        if: matrix.os == 'macos-latest'
        run: flutter config --enable-macos-desktop

      - name: Enable platform (Windows)
        if: matrix.os == 'windows-latest'
        run: flutter config --enable-windows-desktop

      - name: Build for platform
        run: flutter build ${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'macos-latest' && 'macos' || 'windows' }}